services:
  nginx-proxy:
    build:
      context: ./nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      # - "443:443"  # Uncomment when using HTTPS
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      platforms: ["linux/amd64"]
    container_name: frontend
    expose:
      - "80"
    depends_on:
      database:
        condition: service_healthy
      backend:
        condition: service_started
    env_file:
      - ./frontend/.env
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      platforms:
        - "linux/amd64"
    container_name: backend
    expose:
      - "3000"
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - app-network

  database:
    image: mysql:latest
    container_name: database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: # insert root password here
      MYSQL_DATABASE: furniture_shop
      MYSQL_USER: user
      MYSQL_PASSWORD: # insert user password here
    expose:
      - "3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    expose:
      - "6379"
    environment:
      - REDIS_PASSWORD= # insert redis password
    volumes:
      - redis_data:/data
    networks:
      - app-network

volumes:
  db_data:
  redis_data:

networks:
  app-network:
    driver: bridge
#   sonarqube:
#     image: sonarqube:community
#     hostname: sonarqube
#     container_name: sonarqube
#     read_only: true
#     depends_on:
#       db:
#         condition: service_healthy
#     environment:
#       SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
#       SONAR_JDBC_USERNAME: sonar
#       SONAR_JDBC_PASSWORD: sonar
#     volumes:
#       - sonarqube_data:/opt/sonarqube/data
#       - sonarqube_extensions:/opt/sonarqube/extensions
#       - sonarqube_logs:/opt/sonarqube/logs
#       - sonarqube_temp:/opt/sonarqube/temp
#     ports:
#       - "9000:9000"
#     networks:
#       - ${NETWORK_TYPE:-ipv4}
#   db:
#     image: postgres:17
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     hostname: postgresql
#     container_name: postgresql
#     environment:
#       POSTGRES_USER: sonar
#       POSTGRES_PASSWORD: sonar
#       POSTGRES_DB: sonar
#     volumes:
#       - postgresql:/var/lib/postgresql
#       - postgresql_data:/var/lib/postgresql/data
#     networks:
#       - ${NETWORK_TYPE:-ipv4}

# volumes:
#   sonarqube_data:
#   sonarqube_temp:
#   sonarqube_extensions:
#   sonarqube_logs:
#   postgresql:
#   postgresql_data:

# networks:
#   ipv4:
#     driver: bridge
#     enable_ipv6: false
#   dual:
#     driver: bridge
#     enable_ipv6: true
#     ipam:
#       config:
#         - subnet: "192.168.2.0/24"
#           gateway: "192.168.2.1"
#         - subnet: "2001:db8:2::/64"
#           gateway: "2001:db8:2::1"